// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// AliveResponse defines model for AliveResponse.
type AliveResponse struct {
	// Text alive
	Text string `json:"text"`
}

// GetSecretOut defines model for GetSecretOut.
type GetSecretOut struct {
	// Payload Secret payload
	Payload string `json:"payload"`
}

// PostSecretIn defines model for PostSecretIn.
type PostSecretIn struct {
	// Payload Secret payload
	Payload string `json:"payload"`
}

// PostSecretOut defines model for PostSecretOut.
type PostSecretOut struct {
	// SecretID Secret ID
	SecretID string `json:"secretID"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Error string `json:"error"`
}

// GetSecretParams defines parameters for GetSecret.
type GetSecretParams struct {
	SecretID string `form:"secretID" json:"secretID"`
}

// PostSecretJSONRequestBody defines body for PostSecret for application/json ContentType.
type PostSecretJSONRequestBody = PostSecretIn

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Check
	// (GET /healthcheck)
	GetHealthcheck(c *gin.Context)
	// Get secret
	// (GET /secret)
	GetSecret(c *gin.Context, params GetSecretParams)
	// Create secret
	// (POST /secret)
	PostSecret(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetHealthcheck operation middleware
func (siw *ServerInterfaceWrapper) GetHealthcheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealthcheck(c)
}

// GetSecret operation middleware
func (siw *ServerInterfaceWrapper) GetSecret(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSecretParams

	// ------------- Required query parameter "secretID" -------------

	if paramValue := c.Query("secretID"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument secretID is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "secretID", c.Request.URL.Query(), &params.SecretID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter secretID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSecret(c, params)
}

// PostSecret operation middleware
func (siw *ServerInterfaceWrapper) PostSecret(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSecret(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/healthcheck", wrapper.GetHealthcheck)
	router.GET(options.BaseURL+"/secret", wrapper.GetSecret)
	router.POST(options.BaseURL+"/secret", wrapper.PostSecret)
}
